import { zodDirectMembers } from "./utils";
import { _array, arrayMemberCreators } from "./core/array";
import { _boolean } from "./core/boolean";
import { _coerce, coerceMemberCreators } from "./core/coerce";
import { _number, numberMemberCreators } from "./core/number";
import { _object, objectMemberCreators } from "./core/object";
import { _string, stringMemberCreators } from "./core/string";
import { _set, setMemberCreators } from "./core/set";
import {
  _any,
  _bigint,
  _custom,
  _date,
  _discriminatedUnion,
  _effect,
  _enum,
  _function,
  _instanceOf,
  _intersection,
  _lazy,
  _literal,
  _map,
  _nan,
  _nativeEnum,
  _never,
  _null,
  _nullable,
  _oboolean,
  _onumber,
  _optional,
  _ostring,
  _pipeline,
  _preprocess,
  _promise,
  _record,
  _strictObject,
  _symbol,
  _transformer,
  _tuple,
  _undefined,
  _union,
  _unknown,
  _void
} from "./core/others";

export const zodFactory = {
  string: _string,
  number: _number,
  boolean: _boolean,
  object: _object,
  array: _array,
  coerce: _coerce,
  set: _set,
  union: _union,
  enum: _enum,
  literal: _literal,
  promise: _promise,
  optional: _optional,
  any: _any,
  unknown: _unknown,
  bigint: _bigint,
  date: _date,
  function: _function,
  null: _null,
  undefined: _undefined,
  never: _never,
  void: _void,
  nullable: _nullable,
  custom: _custom,
  map: _map,
  record: _record,
  tuple: _tuple,
  intersection: _intersection,
  nan: _nan,
  oboolean: _oboolean,
  discriminatedUnion: _discriminatedUnion,
  instanceof: _instanceOf,
  onumber: _onumber,
  ostring: _ostring,
  nativeEnum: _nativeEnum,
  lazy: _lazy,
  transformer: _transformer,
  effect: _effect,
  pipeline: _pipeline,
  preprocess: _preprocess,
  symbol: _symbol,
  strictObject: _strictObject
} as const satisfies Partial<Record<keyof typeof zodDirectMembers, any>>;

export { zodFactory as zf };
